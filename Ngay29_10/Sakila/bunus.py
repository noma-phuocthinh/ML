import mysql.connector
import pandas as pd
import numpy as np
import os
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score
import matplotlib.pyplot as plt
import seaborn as sns


def getConnect(server, port, database, username, password):
    try:
        conn = mysql.connector.connect(
            host=server,
            port=port,
            database=database,
            user=username,
            password=password
        )
        return conn
    except Exception as e:
        print("Error = ", e)
        return None


def closeConnection(conn):
    if conn is not None:
        conn.close()


def queryDataset(conn, sql):
    cursor = conn.cursor()
    cursor.execute(sql)
    df = pd.DataFrame(cursor.fetchall())

    # L·∫•y t√™n c·ªôt
    if cursor.description:
        column_names = [i[0] for i in cursor.description]
        df.columns = column_names

    return df


def chuyen_csv_sang_excel(duong_dan_csv, duong_dan_excel=None):
    """
    Chuy·ªÉn ƒë·ªïi file CSV sang file Excel

    Parameters:
    - duong_dan_csv: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file CSV c·∫ßn chuy·ªÉn ƒë·ªïi
    - duong_dan_excel: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file Excel ƒë·∫ßu ra (n·∫øu None s·∫Ω t·ª± ƒë·ªông t·∫°o)

    Returns:
    - True n·∫øu th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
    """
    try:
        # Ki·ªÉm tra file CSV c√≥ t·ªìn t·∫°i kh√¥ng
        if not os.path.exists(duong_dan_csv):
            print(f"L·ªói: File CSV kh√¥ng t·ªìn t·∫°i - {duong_dan_csv}")
            return False

        # ƒê·ªçc file CSV
        print(f"ƒêang ƒë·ªçc file CSV: {duong_dan_csv}")
        df = pd.read_csv(duong_dan_csv)
        print(f"ƒê·ªçc th√†nh c√¥ng: {len(df)} d√≤ng, {len(df.columns)} c·ªôt")

        # T·∫°o ƒë∆∞·ªùng d·∫´n Excel n·∫øu kh√¥ng ƒë∆∞·ª£c cung c·∫•p
        if duong_dan_excel is None:
            duong_dan_excel = duong_dan_csv.replace('.csv', '.xlsx')

        # ƒê·∫£m b·∫£o th∆∞ m·ª•c ƒë√≠ch t·ªìn t·∫°i
        os.makedirs(os.path.dirname(duong_dan_excel) if os.path.dirname(duong_dan_excel) else '.', exist_ok=True)

        # Ghi ra file Excel
        print(f"ƒêang ghi file Excel: {duong_dan_excel}")
        with pd.ExcelWriter(duong_dan_excel, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='Data', index=False)

            # T·∫°o sheet th·ªëng k√™
            thong_ke_data = {
                'Thong_Ke': ['T·ªïng s·ªë b·∫£n ghi', 'S·ªë c·ªôt d·ªØ li·ªáu', 'Ng√†y xu·∫•t b√°o c√°o'],
                'Gia_Tri': [len(df), len(df.columns), pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')]
            }
            pd.DataFrame(thong_ke_data).to_excel(writer, sheet_name='ThongKe', index=False)

        print(f"‚úÖ Chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!")
        print(f"üìÇ CSV: {duong_dan_csv}")
        print(f"üìÇ Excel: {duong_dan_excel}")
        print(f"üìä S·ªë d√≤ng: {len(df)}")
        print(f"üìã S·ªë c·ªôt: {len(df.columns)}")

        return True

    except Exception as e:
        print(f"‚ùå L·ªói khi chuy·ªÉn ƒë·ªïi: {e}")
        return False


def luu_dataframe_excel(df, ten_file, thu_muc='.'):
    """
    L∆∞u DataFrame tr·ª±c ti·∫øp ra file Excel v·ªõi nhi·ªÅu sheet

    Parameters:
    - df: DataFrame c·∫ßn l∆∞u
    - ten_file: T√™n file (kh√¥ng c·∫ßn ƒëu√¥i .xlsx)
    - thu_muc: Th∆∞ m·ª•c l∆∞u file
    """
    try:
        duong_dan = os.path.join(thu_muc, f"{ten_file}.xlsx")

        # ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i
        os.makedirs(thu_muc, exist_ok=True)

        with pd.ExcelWriter(duong_dan, engine='openpyxl') as writer:
            # Sheet d·ªØ li·ªáu ch√≠nh
            df.to_excel(writer, sheet_name='DuLieu', index=False)

            # Sheet th·ªëng k√™
            thong_ke = {
                'Thong_Ke': ['T·ªïng s·ªë b·∫£n ghi', 'S·ªë c·ªôt', 'Ng√†y t·∫°o'],
                'Gia_Tri': [len(df), len(df.columns), pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')]
            }
            pd.DataFrame(thong_ke).to_excel(writer, sheet_name='ThongKe', index=False)

            # Sheet th√¥ng tin c·ªôt
            column_info = {
                'Ten_Cot': df.columns.tolist(),
                'Kieu_Du_Lieu': [str(dtype) for dtype in df.dtypes],
                'So_Gia_Tri_Non_Null': [df[col].count() for col in df.columns]
            }
            pd.DataFrame(column_info).to_excel(writer, sheet_name='ThongTinCot', index=False)

        print(f"‚úÖ ƒê√£ l∆∞u DataFrame ra file: {duong_dan}")
        print(f"üìä S·ªë d√≤ng: {len(df)}, S·ªë c·ªôt: {len(df.columns)}")

        return duong_dan

    except Exception as e:
        print(f"‚ùå L·ªói khi l∆∞u Excel: {e}")
        return None


def phan_loai_khach_hang_theo_phim(conn):
    """
    Ph√¢n lo·∫°i kh√°ch h√†ng theo t√™n phim - nh·ªØng kh√°ch h√†ng n√†o ƒë√£ thu√™ phim n√†o
    """
    try:
        sql = """
        SELECT 
            f.title AS Ten_Phim,
            c.customer_id AS Ma_Khach_Hang,
            CONCAT(c.first_name, ' ', c.last_name) AS Ten_Khach_Hang,
            c.email AS Email,
            COUNT(r.rental_id) AS So_Lan_Thue,
            MAX(r.rental_date) AS Lan_Thue_Gan_Nhat
        FROM film f
        INNER JOIN inventory i ON f.film_id = i.film_id
        INNER JOIN rental r ON i.inventory_id = r.inventory_id
        INNER JOIN customer c ON r.customer_id = c.customer_id
        GROUP BY f.film_id, c.customer_id
        ORDER BY f.title, c.customer_id
        """

        df = queryDataset(conn, sql)

        # L∆∞u tr·ª±c ti·∫øp ra Excel thay v√¨ CSV
        if df is not None and not df.empty:
            luu_dataframe_excel(df, 'phan_loai_khach_hang_theo_phim', 'output')

        return df

    except Exception as e:
        print("L·ªói khi ph√¢n lo·∫°i kh√°ch h√†ng theo phim:", e)
        return None


def phan_loai_khach_hang_theo_category(conn):
    """
    Ph√¢n lo·∫°i kh√°ch h√†ng theo category - nh·ªØng kh√°ch h√†ng n√†o ƒë√£ thu√™ phim thu·ªôc category n√†o
    Lo·∫°i b·ªè d·ªØ li·ªáu tr√πng l·∫∑p (m·ªói kh√°ch h√†ng ch·ªâ xu·∫•t hi·ªán 1 l·∫ßn trong 1 category)
    """
    try:
        sql = """
        SELECT DISTINCT
            cat.name AS Ten_Category,
            c.customer_id AS Ma_Khach_Hang,
            CONCAT(c.first_name, ' ', c.last_name) AS Ten_Khach_Hang,
            c.email AS Email,
            COUNT(r.rental_id) AS So_Luot_Thue_Trong_Category,
            MAX(r.rental_date) AS Lan_Thue_Gan_Nhat
        FROM category cat
        INNER JOIN film_category fc ON cat.category_id = fc.category_id
        INNER JOIN film f ON fc.film_id = f.film_id
        INNER JOIN inventory i ON f.film_id = i.film_id
        INNER JOIN rental r ON i.inventory_id = r.inventory_id
        INNER JOIN customer c ON r.customer_id = c.customer_id
        GROUP BY cat.category_id, c.customer_id
        ORDER BY cat.name, c.customer_id
        """

        df = queryDataset(conn, sql)

        # L∆∞u tr·ª±c ti·∫øp ra Excel thay v√¨ CSV
        if df is not None and not df.empty:
            luu_dataframe_excel(df, 'phan_loai_khach_hang_theo_category', 'output')

        return df

    except Exception as e:
        print("L·ªói khi ph√¢n lo·∫°i kh√°ch h√†ng theo category:", e)
        return None


def gom_cum_khach_hang_kmeans(conn, n_clusters=4):
    """
    Gom c·ª•m kh√°ch h√†ng v·ªÅ m·ª©c ƒë·ªô quan t√¢m Film v√† Inventory s·ª≠ d·ª•ng K-Means
    """
    try:
        # Truy v·∫•n ƒë·ªÉ l·∫•y c√°c thu·ªôc t√≠nh cho ph√¢n c·ª•m
        sql = """
        SELECT 
            c.customer_id AS customer_id,
            CONCAT(c.first_name, ' ', c.last_name) AS customer_name,

            -- Thu·ªôc t√≠nh v·ªÅ t·∫ßn su·∫•t thu√™
            COUNT(r.rental_id) AS total_rentals,
            COUNT(DISTINCT f.film_id) AS unique_films_rented,
            COUNT(DISTINCT i.inventory_id) AS unique_inventories_used,

            -- Thu·ªôc t√≠nh v·ªÅ ƒëa d·∫°ng th·ªÉ lo·∫°i
            COUNT(DISTINCT fc.category_id) AS categories_explored,

            -- Thu·ªôc t√≠nh v·ªÅ th·ªùi gian ho·∫°t ƒë·ªông
            DATEDIFF(MAX(r.rental_date), MIN(r.rental_date)) AS rental_period_days,

            -- Thu·ªôc t√≠nh v·ªÅ ƒë·ªô m·ªõi c·ªßa phim (release year)
            AVG(f.release_year) AS avg_film_release_year,

            -- Thu·ªôc t√≠nh v·ªÅ gi√° thu√™
            AVG(f.rental_rate) AS avg_rental_rate,
            SUM(p.amount) AS total_spent,

            -- Thu·ªôc t√≠nh v·ªÅ rating phim (chuy·ªÉn ƒë·ªïi th√†nh s·ªë)
            AVG(CASE 
                WHEN f.rating = 'G' THEN 1
                WHEN f.rating = 'PG' THEN 2
                WHEN f.rating = 'PG-13' THEN 3
                WHEN f.rating = 'R' THEN 4
                WHEN f.rating = 'NC-17' THEN 5
                ELSE 0
            END) AS avg_film_rating_numeric,

            -- Thu·ªôc t√≠nh v·ªÅ ƒë·ªô d√†i phim
            AVG(f.length) AS avg_film_length,

            -- T·∫ßn su·∫•t thu√™ g·∫ßn ƒë√¢y (s·ªë ng√†y k·ªÉ t·ª´ l·∫ßn thu√™ cu·ªëi)
            DATEDIFF('2006-02-14', MAX(r.rental_date)) AS days_since_last_rental

        FROM customer c
        INNER JOIN rental r ON c.customer_id = r.customer_id
        INNER JOIN inventory i ON r.inventory_id = i.inventory_id
        INNER JOIN film f ON i.film_id = f.film_id
        INNER JOIN film_category fc ON f.film_id = fc.film_id
        INNER JOIN payment p ON r.rental_id = p.rental_id
        GROUP BY c.customer_id
        HAVING total_rentals > 0
        ORDER BY total_rentals DESC
        """

        df = queryDataset(conn, sql)

        if df.empty:
            print("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ ph√¢n c·ª•m")
            return None

        # Chu·∫©n b·ªã d·ªØ li·ªáu cho K-Means
        features = [
            'total_rentals', 'unique_films_rented', 'unique_inventories_used',
            'categories_explored', 'avg_film_release_year', 'avg_rental_rate',
            'total_spent', 'avg_film_rating_numeric', 'avg_film_length',
            'days_since_last_rental'
        ]

        X = df[features].fillna(0)

        # Chu·∫©n h√≥a d·ªØ li·ªáu
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X)

        # Th·ª±c hi·ªán K-Means clustering
        kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
        clusters = kmeans.fit_predict(X_scaled)

        # Th√™m nh√≥m c·ª•m v√†o dataframe
        df['cluster'] = clusters

        # T√≠nh silhouette score ƒë·ªÉ ƒë√°nh gi√° ch·∫•t l∆∞·ª£ng c·ª•m
        silhouette_avg = silhouette_score(X_scaled, clusters)
        print(f"Silhouette Score: {silhouette_avg:.3f}")

        # Ph√¢n t√≠ch ƒë·∫∑c ƒëi·ªÉm t·ª´ng c·ª•m
        cluster_analysis = df.groupby('cluster')[features].mean()

        # ƒê·∫∑t t√™n cho c√°c c·ª•m d·ª±a tr√™n ƒë·∫∑c ƒëi·ªÉm
        cluster_names = {}
        for cluster_id in range(n_clusters):
            cluster_data = cluster_analysis.loc[cluster_id]

            # Ph√¢n lo·∫°i d·ª±a tr√™n ƒë·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t
            if cluster_data['total_rentals'] > cluster_analysis['total_rentals'].mean():
                if cluster_data['days_since_last_rental'] < cluster_analysis['days_since_last_rental'].mean():
                    cluster_names[cluster_id] = "Kh√°ch h√†ng t√≠ch c·ª±c"
                else:
                    cluster_names[cluster_id] = "Kh√°ch h√†ng trung th√†nh c≈©"
            else:
                if cluster_data['avg_rental_rate'] > cluster_analysis['avg_rental_rate'].mean():
                    cluster_names[cluster_id] = "Kh√°ch h√†ng cao c·∫•p"
                else:
                    cluster_names[cluster_id] = "Kh√°ch h√†ng th·ªânh tho·∫£ng"

        df['cluster_name'] = df['cluster'].map(cluster_names)

        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        print("\n" + "=" * 80)
        print("K·∫æT QU·∫¢ PH√ÇN C·ª§M KH√ÅCH H√ÄNG")
        print("=" * 80)

        print(f"\nT·ªïng s·ªë kh√°ch h√†ng ƒë∆∞·ª£c ph√¢n c·ª•m: {len(df)}")
        print(f"S·ªë l∆∞·ª£ng c·ª•m: {n_clusters}")

        print("\nPH√ÇN B·ªê KH√ÅCH H√ÄNG THEO C·ª§M:")
        cluster_distribution = df['cluster_name'].value_counts()
        print(cluster_distribution)

        print("\nƒê·∫∂C ƒêI·ªÇM C√ÅC C·ª§M:")
        for cluster_id in range(n_clusters):
            cluster_df = df[df['cluster'] == cluster_id]
            print(f"\n--- {cluster_names[cluster_id]} (C·ª•m {cluster_id}) - {len(cluster_df)} kh√°ch h√†ng ---")
            print(f"  - T·ªïng s·ªë l∆∞·ª£t thu√™ trung b√¨nh: {cluster_df['total_rentals'].mean():.1f}")
            print(f"  - S·ªë phim ƒë·ªôc nh·∫•t trung b√¨nh: {cluster_df['unique_films_rented'].mean():.1f}")
            print(f"  - T·ªïng chi ti√™u trung b√¨nh: ${cluster_df['total_spent'].mean():.2f}")
            print(f"  - S·ªë ng√†y t·ª´ l·∫ßn thu√™ cu·ªëi: {cluster_df['days_since_last_rental'].mean():.1f} ng√†y")

        # Tr·ª±c quan h√≥a k·∫øt qu·∫£
        visualize_clusters(df, features)

        # L∆∞u k·∫øt qu·∫£ ph√¢n c·ª•m ra Excel
        if df is not None and not df.empty:
            luu_dataframe_excel(df, 'ket_qua_phan_cum_khach_hang', 'output')

        return df

    except Exception as e:
        print("L·ªói khi th·ª±c hi·ªán ph√¢n c·ª•m:", e)
        return None


def visualize_clusters(df, features):
    """
    Tr·ª±c quan h√≥a k·∫øt qu·∫£ ph√¢n c·ª•m
    """
    try:
        plt.figure(figsize=(15, 10))

        # Bi·ªÉu ƒë·ªì 1: Ph√¢n b·ªë c·ª•m
        plt.subplot(2, 2, 1)
        df['cluster_name'].value_counts().plot(kind='bar', color='skyblue')
        plt.title('Ph√¢n b·ªë kh√°ch h√†ng theo c·ª•m')
        plt.xticks(rotation=45)
        plt.ylabel('S·ªë l∆∞·ª£ng kh√°ch h√†ng')

        # Bi·ªÉu ƒë·ªì 2: T·ªïng s·ªë l∆∞·ª£t thu√™ vs T·ªïng chi ti√™u
        plt.subplot(2, 2, 2)
        scatter = plt.scatter(df['total_rentals'], df['total_spent'],
                              c=df['cluster'], cmap='viridis', alpha=0.6)
        plt.xlabel('T·ªïng s·ªë l∆∞·ª£t thu√™')
        plt.ylabel('T·ªïng chi ti√™u ($)')
        plt.title('Ph√¢n c·ª•m theo l∆∞·ª£t thu√™ v√† chi ti√™u')
        plt.colorbar(scatter, label='C·ª•m')

        # Bi·ªÉu ƒë·ªì 3: S·ªë phim ƒë·ªôc nh·∫•t vs S·ªë th·ªÉ lo·∫°i
        plt.subplot(2, 2, 3)
        scatter = plt.scatter(df['unique_films_rented'], df['categories_explored'],
                              c=df['cluster'], cmap='viridis', alpha=0.6)
        plt.xlabel('S·ªë phim ƒë·ªôc nh·∫•t ƒë√£ thu√™')
        plt.ylabel('S·ªë th·ªÉ lo·∫°i ƒë√£ kh√°m ph√°')
        plt.title('Ph√¢n c·ª•m theo ƒëa d·∫°ng phim v√† th·ªÉ lo·∫°i')
        plt.colorbar(scatter, label='C·ª•m')

        # Bi·ªÉu ƒë·ªì 4: ƒê·ªô d√†i phim trung b√¨nh vs Rating trung b√¨nh
        plt.subplot(2, 2, 4)
        scatter = plt.scatter(df['avg_film_length'], df['avg_film_rating_numeric'],
                              c=df['cluster'], cmap='viridis', alpha=0.6)
        plt.xlabel('ƒê·ªô d√†i phim trung b√¨nh (ph√∫t)')
        plt.ylabel('Rating phim trung b√¨nh')
        plt.title('Ph√¢n c·ª•m theo ƒë·∫∑c ƒëi·ªÉm phim ∆∞a th√≠ch')
        plt.colorbar(scatter, label='C·ª•m')

        plt.tight_layout()

        # T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a t·ªìn t·∫°i
        os.makedirs('output', exist_ok=True)

        plt.savefig('output/phan_cum_khach_hang.png', dpi=300, bbox_inches='tight')
        plt.show()

        print("ƒê√£ l∆∞u bi·ªÉu ƒë·ªì tr·ª±c quan ra file: output/phan_cum_khach_hang.png")

    except Exception as e:
        print("L·ªói khi tr·ª±c quan h√≥a:", e)


def chuyen_nhieu_csv_sang_excel(danh_sach_duong_dan):
    """
    Chuy·ªÉn ƒë·ªïi nhi·ªÅu file CSV sang Excel c√πng l√∫c
    """
    thanh_cong = 0
    that_bai = 0

    for duong_dan_csv in danh_sach_duong_dan:
        print(f"\n{'=' * 50}")
        print(f"X·ª≠ l√Ω file: {duong_dan_csv}")

        if chuyen_csv_sang_excel(duong_dan_csv):
            thanh_cong += 1
        else:
            that_bai += 1

    print(f"\n{'=' * 50}")
    print("üéØ T·ªîNG K·∫æT CHUY·ªÇN ƒê·ªîI:")
    print(f"‚úÖ Th√†nh c√¥ng: {thanh_cong} file")
    print(f"‚ùå Th·∫•t b·∫°i: {that_bai} file")

    return thanh_cong, that_bai


# K·∫øt n·ªëi v√† th·ª±c hi·ªán ph√¢n c·ª•m
conn = getConnect('localhost', 3306, 'sakila', 'root', '@Obama123')

if conn is not None:
    try:
        # T·∫°o th∆∞ m·ª•c output
        os.makedirs('output', exist_ok=True)

        print("=" * 80)
        print("PH√ÇN C·ª§M KH√ÅCH H√ÄNG S·ª¨ D·ª§NG K-MEANS")
        print("=" * 80)

        # Th·ª±c hi·ªán ph√¢n c·ª•m v·ªõi 4 c·ª•m
        df_clusters = gom_cum_khach_hang_kmeans(conn, n_clusters=4)

        if df_clusters is not None:
            print("\n" + "=" * 80)
            print("DANH S√ÅCH KH√ÅCH H√ÄNG THEO C·ª§M")
            print("=" * 80)

            # Hi·ªÉn th·ªã 15 kh√°ch h√†ng ƒë·∫ßu ti√™n v·ªõi th√¥ng tin c·ª•m
            display_columns = ['customer_id', 'customer_name', 'cluster_name',
                               'total_rentals', 'unique_films_rented', 'total_spent']
            print(df_clusters[display_columns].head(15))

        print("\n" + "=" * 80)
        print("PH√ÇN LO·∫†I KH√ÅCH H√ÄNG THEO PHIM")
        print("=" * 80)

        # Ph√¢n lo·∫°i kh√°ch h√†ng theo phim
        df_phan_loai_phim = phan_loai_khach_hang_theo_phim(conn)
        if df_phan_loai_phim is not None:
            print(f"T·ªïng s·ªë b·∫£n ghi ph√¢n lo·∫°i theo phim: {len(df_phan_loai_phim)}")

        print("\n" + "=" * 80)
        print("PH√ÇN LO·∫†I KH√ÅCH H√ÄNG THEO CATEGORY")
        print("=" * 80)

        # Ph√¢n lo·∫°i kh√°ch h√†ng theo category
        df_phan_loai_category = phan_loai_khach_hang_theo_category(conn)
        if df_phan_loai_category is not None:
            print(f"T·ªïng s·ªë b·∫£n ghi ph√¢n lo·∫°i theo category: {len(df_phan_loai_category)}")

    except Exception as e:
        print("L·ªói khi th·ª±c hi·ªán truy v·∫•n:", e)
    finally:
        closeConnection(conn)
else:
    print("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn database")

# V√≠ d·ª• s·ª≠ d·ª•ng h√†m chuy·ªÉn ƒë·ªïi CSV sang Excel
if __name__ == "__main__":
    # N·∫øu c√≥ file CSV c≈© mu·ªën chuy·ªÉn ƒë·ªïi
    duong_dan_csv_cu = r"D:\ML\Ngay29_10\Sakila\ket_qua_phan_cum_khach_hang.csv"

    if os.path.exists(duong_dan_csv_cu):
        print("\n" + "=" * 80)
        print("CHUY·ªÇN ƒê·ªîI FILE CSV C≈® SANG EXCEL")
        print("=" * 80)
        chuyen_csv_sang_excel(duong_dan_csv_cu)